struct RMstruct
{
	float RMShere(float3 pos)
	{
		return length(pos) - 50;
	}
	float3 RMNormal(float3 pos)
	{
	float2 Off = float2(0.01, 0);
	return normalize(float3(
		RMShere(pos + Off.xyy) - RMShere(pos-Off.xyy),
		RMShere(pos + Off.yxy) - RMShere(pos-Off.yxy),
		RMShere(pos + Off.yyx) - RMShere(pos-Off.yyx)
		));
	}
	
	float opSmoothUnion(float d1, float d2, float k)
	{
	float h= clamp( 0.5+ 0.5*(d2-d1)/k, 0.0, 1.0);
	return mix(d2, d1, h) - k*h*(1.0-h);
	)
};

RMstruct RM;
float4 Col = 0;
float3 pos = WorldPos;
float3 Normal = 0;

for (int i = 0; i < MaxSteps; ++i)
{
	if(SceneDepth < length(pos - CameraPosition))
	break;
	
	float d1= RM.RMShere(pos-ObjectPos)
	float d2= SceneDepth-length(pos - CameraPosition);
	
	float distance = RM.opSmoothUnion(d1,d2,Smooth);
	if (distance < 0.01)
	{
		Col = 1;
		Normal = RM.RMNormal(pos-ObjectPos);
		break;
	}

	pos += CameraVector * distance;
}
return float4(Normal,Col.a);